# Copy file to planeur.net FTP server

name: Validate, Convert, Push to FTP

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# see: https://github.com/marketplace/actions/ftp-deployment
jobs:
  validate-airspace:
    name: Validate OpenAir france.txt
    runs-on: ubuntu-latest
    outputs:
      validation-output: ${{ steps.validation.outputs.parser-output }}
    steps:
    - name: üöö Get latest code
      uses: actions/checkout@v3

    - id: validation
      name:  Validate france.txt + generate .geojson
      run: |
        echo "## Install openaip-openair-parser"
        git clone https://github.com/openAIP/openaip-openair-parser.git
        cd openaip-openair-parser
        npm install
        echo "## Validating ..."
        rm ../france.geojson
        SCRIPT_OUTPUT=$(node ./cli.js -f ../france.txt -V -o ../france.geojson)
        SCRIPT_RC=$?
        echo "parser_output=$SCRIPT_OUTPUT"
        echo "parser_output=$SCRIPT_OUTPUT" >> $GITHUB_OUTPUT

    - name: ‚öôÔ∏è Push .geojson to repo
      run: |
        # push to repo
        echo "Pushing .geojson to repo"
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        git add ./france.geojson

  debug:
    needs: validate-airspace
    runs-on: ubuntu-latest
    steps:
      - name: Debug output
        run: |
          echo "${{ toJson(needs.validate-airspace.outputs.validation-output) }}"

  web-deploy:
    name: üéâ Upload files to FTP
    runs-on: ubuntu-latest
    needs: [validate-airspace]
    if: |
      always() &&
      contains(needs.validate-airspace.outputs.validation-output, 'Successfully parsed')

    steps:
    - name: üöö Get latest code
      uses: actions/checkout@v3

    - name: üìÇ Sync files
      uses: SamKirkland/FTP-Deploy-Action@4.3.0
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: "./"
        server-dir: "./"
        exclude: |
          **/.git*
          **/.git*/**
          **/bin/**
          france.cub
          france.geojson
          README.md
        dry-run: false

  convert-to-cub:
    name: Convert france.txt to .cub
    runs-on: ubuntu-latest
    needs: [validate-airspace]
    if: |
      always() &&
      contains(needs.validate-airspace.outputs.validation-output, 'Successfully parsed')
    steps:
    - name: üöö Get latest code
      uses: actions/checkout@v3

    - name: ‚öôÔ∏è Convert to .cub and push to repo
      run: |
        echo "Creating new .cub file"
        chmod +x ./bin/openair2cub
        ./bin/openair2cub france.txt

        # push to repo
        echo "Pushing .cub to repo"
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        git add france.cub
        
        set +e  # Grep succeeds with nonzero exit codes to show results.
        git status | grep modified
        if [ $? -eq 0 ]
        then
            set -e
            git commit -m "Auto generated file"
            git pull
            git push
        else
            set -e
            echo "No changes since last run"
        fi
        


